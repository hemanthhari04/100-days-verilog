
`timescale 1ns / 1ps

module tb_adder_16bit;
    reg [15:0] a, b;
    reg cin;
    wire [15:0] sum;
    wire cout;
    integer i, j, k;

    // Instantiate the 16-bit adder module
    adder_16bit uut (
        .a(a),
        .b(b),
        .cin(cin),
        .sum(sum),
        .cout(cout)
    );

    initial begin
        // Loop through all possible values of a, b, and cin
        $monitor("a=%b ,b=%b ,cin=%b ,sum=%b ,cout=%b",a, b, cin, sum, cout) ;
        for (i = 0; i < 65536; i = i + 1) begin
            for (j = 0; j < 65536; j = j + 1) begin
                for (k = 0; k < 2; k = k + 1) begin
                    a = i;
                    b = j;
                    cin = k;
                    #1;  // Small delay to process results
                    
                    // Display only failed cases to optimize output
                    if ({cout, sum} !== (a + b + cin)) begin
                        $display("Mismatch at a=%h, b=%h, cin=%b -> sum=%h, cout=%b (Expected: %h)", 
                                 a, b, cin, sum, cout, (a + b + cin));
                    end
                end
            end
        end
        $display("Exhaustive testing completed!");
        $stop;
    end
endmodule

